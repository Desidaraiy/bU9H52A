import { TradeDecision, TradeDecisionAction } from "../types";
import { RiskEngine } from "../risk/engine";
import { logger } from "../utils/logger";
import { NEURAL_CONSTANTS } from "../config/constants";

export class DecisionMaker {
  constructor(private riskEngine: RiskEngine) {}

  /**
   * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–æ–≤
   */
  makeFinalDecision(
    neuralDecision: TradeDecision,
    currentPortfolioValue: number,
    volatilityScore: number
  ): TradeDecision {
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    const adjustedConfidence =
      neuralDecision.confidence * (1 - volatilityScore);

    // –í –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫–∏
    if (
      this.riskEngine.getCurrentMode() === "SAFETY" &&
      neuralDecision.action === "BUY"
    ) {
      logger.warn("–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ BUY –≤ –∞–≤–∞—Ä–∏–π–Ω–æ–º —Ä–µ–∂–∏–º–µ");
      return {
        ...neuralDecision,
        action: "HOLD",
        confidence: adjustedConfidence,
      };
    }

    // –ü—Ä–∏ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ - —Ö–æ–ª–¥–∏–º
    if (adjustedConfidence < NEURAL_CONSTANTS.MIN_CONFIDENCE) {
      return {
        ...neuralDecision,
        action: "HOLD",
        confidence: adjustedConfidence,
      };
    }

    // –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
    const positionSize = this.riskEngine.calculatePositionSize(
      currentPortfolioValue,
      volatilityScore
    );

    return {
      ...neuralDecision,
      amount: positionSize,
      confidence: adjustedConfidence,
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ—à–µ–Ω–∏–µ "–æ—Å–æ–±–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é"
   */
  isSpecialOpportunity(decision: TradeDecision): boolean {
    return (
      decision.confidence > 0.8 &&
      decision.potentialProfit > 0.15 &&
      this.riskEngine.canSwitchToAggressive(
        decision.confidence,
        decision.potentialProfit
      )
    );
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
   */
  formatOpportunityMessage(decision: TradeDecision): string {
    const actionMap: Record<TradeDecisionAction, string> = {
      BUY: "–ü–æ–∫—É–ø–∫–∞",
      SELL: "–ü—Ä–æ–¥–∞–∂–∞",
      HOLD: "–£–¥–µ—Ä–∂–∞–Ω–∏–µ",
    };

    return `
      üöÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!
      –°–∏–º–≤–æ–ª: ${decision.symbol}
      –î–µ–π—Å—Ç–≤–∏–µ: ${actionMap[decision.action]}
      –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ${(decision.potentialProfit * 100).toFixed(1)}%
      –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞: ${(decision.confidence * 100).toFixed(1)}%
      ${decision.reason ? `–ü—Ä–∏—á–∏–Ω–∞: ${decision.reason}` : ""}
    `;
  }
}
